openapi: 3.0.3
info:
  title: SOSCI - OpenAPI 3.0
  description: |-
    Some useful links:
    - [The SOSCI repository](https://github.com/amosproj/amos2022ws03-software-oscilloscope)
    - [The API definition](https://github.com/amosproj/amos2022ws03-software-oscilloscope/tree/main/Documentation/openapi.yaml)
    - [Web Application](https://amos-sosci.die-degens.eu/ui/)

  license:
    name: MIT License
    url: https://github.com/amosproj/amos2022ws03-software-oscilloscope/blob/dev/LICENSE
  version: sprint-09
externalDocs:
  description: Find out more about SOSCI
  url: https://github.com/amosproj/amos2022ws03-software-oscilloscope
servers:
  - url: https://amos-sosci.die-degens.eu/api/
  - url: https://amos-sosci.die-degens.eu/int/api/
  - url: https://amos-sosci.die-degens.eu/dev/api/
tags:
  - name: REST API
    description: Rest api for interaction between frontend & backend
  - name: WebSocket
    description: WebSocket of the backend for signal transmission

paths:
  /config:
    post:
      tags:
        - REST API
      summary: Store a new configuration for channels
      description: Store a new configuration for channels. If there is already a existing configuration, it will be overwritten.
      operationId: storeConfig
      parameters:
        - name: api_key
          in: header
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new configuration for channels
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelConfig'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChannelConfig'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChannelConfig'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelConfig'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChannelConfig'
        '405':
          description: Invalid input
      security:
        - api_key: []
    get:
      tags:
        - REST API
      summary: Get the current channel configuration
      description: Get the current channel configuration if there is one.
      operationId: getChannelConfig
      parameters:
        - name: api_key
          in: header
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelConfig'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChannelConfig'
        '404':
          description: No channel config found
      security:
        - api_key: []
  ws://<backend>:
    get:
      tags:
        - WebSocket
      summary: Connect to websocket to retrieve channel signals
      description: |-
        The websocket is served from root while the port depends on the backend configuration. <br/>
        Maximum of connections is 1. A new connection will disconnect the previous client and sends signal only to the new client.
      responses:
        default:
          description: |-
            Float64Array of channel signals <br/>
            The array can contain several appended ChannelSignal into one package to optimize the network traffic. <br/>
            It is still delivered as one Float64Array, so use the number of channels to iterate over the array.
          content:
            Float64Array:
              schema:
                  $ref: '#/components/schemas/ChannelSignal'

components:
  schemas:
    Channel:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
          example: 1
        thickness:
          type: boolean
          example: false
        offset:
          type: number
          format: float
          example: 0.0
        sweepSpeed:
          type: number
          format: float
          example: 1.0
        amplitude:
          type: number
          format: float
          example: 1.0
      xml:
        name: Channel
    ChannelConfig:
      type: object
      properties:
        channels:
          type: array
          xml:
            name: channels
            wrapped: true
          items:
            $ref: '#/components/schemas/Channel'
      xml:
        name: channelconfig
    ChannelSignal:
      description: Signals for all 10 channels
      type: array
      minLength: 10
      xml:
        wrapped: true
      items:
          type: number
          format: float
          example: 0.5
      example: [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]

  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header